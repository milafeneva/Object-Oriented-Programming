#include <iostream>
#include <cstring>
#include <fstream>
using namespace std;

class NoProductFoundException {
private:
    string category;
public:
    NoProductFoundException(string category = "") {
        this->category = category;
    }
    void print() {
        cout << "No products from this category " << category << " were found in this store" << endl;
    }
};

class Product {
private:
    string name;
    string category;
    int price;
    int n;
public:
    Product(string name = "", string category = " ", int price = 0, int n = 0) {
        this->name = name;
        this->category = category;
        this->price = price;
        this->n = n;
    }
    int totalPrice() {
        return n * price;
    }
    friend ostream &operator<<(ostream &os, const Product &p) {
        os << p.name << " (" << p.category << ") " << p.price << " x " << p.n << " = " << p.n * p.price << endl;
        return os;
    }
    string getName() {
        return name;
    }
    bool operator==( Product &pr) {
        return this->name == pr.name;
    }
    string getCategory() {
        return category;
    }
    friend istream &operator>>(istream &is, Product &p) {
        getline(is, p.name);
        getline(is, p.category);
        is >> p.price >> p.n;
        is.ignore();
    }
};
class Store {
private:
    Product *p;
    int n;
    void copy(const Store &other) {
        this->n = other.n;
        this->p = new Product[other.n];
        for (int i = 0; i < other.n; i++) {
            this->p[i] = other. p[i];
        }
    }
public:
    Store(Product *p = 0, int n = 0) {
        this->n = n;
        this->p = new Product[n];
        for (int i = 0; i < n; i++) {
            this->p[i] = p[i];
        }
    }
    ~Store() {
        delete [] p;
    }
    Store(const Store& other) {
        copy(other);
    }
    Store & operator=(const Store& other) {
        if (this != &other) {
            delete [] p;
            copy(other);
        }
        return *this;
    }
    Store&operator+=(Product &pr) {
        for (int i = 0; i < n; i++) {
            if (p[i] == pr) {
                return *this;
            }
        }
        Product *tmp = new Product[n+1];
        for (int i = 0; i < n; i++) {
            tmp[i] = p[i];
        }
        tmp[n++] = pr;
        delete [] p;
        p = tmp;
        return *this;
    }
    friend ostream &operator<<(ostream &os, const Store &s) {
        for (int i = 0; i < s.n; i++) {
            os << s.p[i];
        }
        return os;
    }
    Store fromCategory(string &category) {
        Store temp ;
        int counter = 0;
        for (int i = 0; i < n; i++) {
            if (p[i].getCategory() == category) {
                counter++;
                temp += p[i];
            }
        }
        if (counter == 0) {
            throw NoProductFoundException(category);
        }
        return temp;
    } 
};
 
int main() {
    Store s;
    ifstream f("input.txt");
    Product p;
    while (f >> p) {
        s+=p;
    }
    string category;
    cin >> category;
    ofstream out1("output1.txt");
    out1<<s;
    ofstream out2("output2.txt");
    try {
        Store temp = s.fromCategory(category);
        out2 << temp;
    } catch (NoProductFoundException e) {
        e.print();
    }


}
