#include <iostream>
#include <cstring>
#include <fstream>
using namespace std;

class Library {
protected:
    string name;
    string city;
    float price;
    bool weekend;
public:
    Library(string name = " ", string city = " ", float price = 0, bool weekend = false) {
        this->name = name;
        this->city = city;
        this->price = price;
        this->weekend = weekend;
    }
    virtual void printDetail() = 0;
    virtual double calculateMembershipCardCost() = 0;
    bool getWeekend() {
        return weekend;
    }
};

class AcademicLibrary : public Library {
private:
    bool research;
    int collections;
public:
    AcademicLibrary(string name = " ", string city = " ", float price = 0, bool weekend = false, bool research = 0, int collections = 0) : Library(name, city, price, weekend) {
        this->collections = collections;
        this->research = research;
    }
    double calculateMembershipCardCost() override {
        double calculateCost = price;
        if (research) {
            calculateCost *= 1.24;
        }
        return calculateCost + collections*6;
    }
    void printDetail() override {
        cout << name << " - (Academic) " << city <<  " " << collections << calculateMembershipCardCost() << endl;
    }
};

class NationalLibrary : public Library {
private:
    bool education;
    int rakopisi;
public:
    NationalLibrary(string name = " ", string city = " ", float price = 0, bool weekend = false, bool research = 0,bool education = 0, int rak = 0) : Library(name, city, price, weekend) {
        this->education = education;
        this->rakopisi = rak;
    }
    double calculateMembershipCardCost() override {
        double calculateCost = price;
        if (education) {
            calculateCost *= 0.93;
        }
        return calculateCost + rakopisi*15;
    }
    void printDetail() override {
        cout << name << " - (National) " << city <<  " " << rakopisi << calculateMembershipCardCost() << endl;
    }
};
int findMostExpensiveNationalLibrary(Library **l, int n) {
    int index = -1;
    for (int i = 0; i < n; i++) {
        if (dynamic_cast<NationalLibrary *>(l[i])) {
            if (index==-1) {
                index = i;
            } else {
                if (l[i]->calculateMembershipCardCost() > l[index]->calculateMembershipCardCost()) {
                    index = i;
                } else if (l[i]->calculateMembershipCardCost() == l[index]->calculateMembershipCardCost()) {
                    if (l[i]->getWeekend()) {
                        index = i;
                    }
                }
            }
        }
    }
    return index;
}

int main() {
    int n, testCase, type;
    cin >> testCase >> n;
    cin.ignore();

    Library** m = new Library*[n];

    for (int i = 0; i < n; ++i) {
        string name;
        string city;
        float base_price;
        bool weekend_working;

        cin >> type;
        cin.ignore();
        getline(cin, name);
        getline(cin, city);
        cin >> base_price;
        cin.ignore();
        cin >> weekend_working;
        cin.ignore();

        if (type == 1) {
            bool open_cooperation;
            int specialized_articles;

            cin >> open_cooperation >> specialized_articles;
            cin.ignore();

            m[i] = new AcademicLibrary(name, city, base_price, weekend_working, open_cooperation, specialized_articles);
        } else {
            bool cultural_program;
            int national_articles;

            cin >> cultural_program >> national_articles;
            cin.ignore();

            m[i] = new NationalLibrary(name, city, base_price, weekend_working, cultural_program, national_articles);
        }
    }

    if(testCase == 1){
        cout << "Abstract and child classes OK" << endl;
    }
    else if(testCase == 2){
        for(int i = 0; i < n; i++){
            cout << m[i]->calculateMembershipCardCost() << endl;
        }
        cout << "calculateMembershipCardCost method OK" << endl;
    }
    else if(testCase == 3){
        for(int i = 0; i < n; i++){
            m[i]->printDetail();
        }
        cout << "printDetail method OK" << endl;
    }
    else if(testCase == 4){
        int most_expensive_nat_lib_index = findMostExpensiveNationalLibrary(m, n);
        if(most_expensive_nat_lib_index>=0){
            m[most_expensive_nat_lib_index]->printDetail();
        }else{
            cout << "National Library not found in the array!"<<endl;
        }
        cout << "findMostExpensiveNationalLibrary method OK" << endl;
    }


    for (int i = 0; i < n; ++i) {
        delete m[i];
    }

    delete[] m;

    return 0;
}
