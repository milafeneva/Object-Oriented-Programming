Да се направи класа County која ќе ги содржи следните променливи:

name, низа од карактери
gdp, цел број
За класата да се направи default конструктор, целосно параметризиран конструктор и get методи за двете променливи.

Да се направи класа State која ќе ги содржи следните променливи:

counties, низа од County објекти
name, низа од карактери
numCounties, цел број
federalTax, децимален број за процент на данок кој е заеднички за сите објекти од оваа класа и може да се пристапи без креирање на инстанца од истата. Иницијално да е поставен на 15.5
redState, булеан вредност за дали државата е републиканска
За класата да се направи default конструктор, целосно параметризиран конструктор и следните функции:

get функции за променливите name, federalTax
set функција за променливата federalTax
increaseFederalTax(int increase) функција за зголемување на федералниот данок (моменталниот процент + додаток)
getFullGDP() функција која ќе го врати вкупниот ГДП на државата пресметан како збир на ГДП на сите окрузи (counties) на државата со одземен процент на федерален данок
print() метод што ќе печати во формат: "State of {име на држава} {во нов ред испечатени имињата на сите окрузи кои припаѓаат на државата}"
Дополнително да се дефинира функција friend void printStatesInGDPOrderByStateType(State states[], int numStates, bool redStates) која ќе ги печати сите држави во зависност дали се републиканска или демократска држава (одредено со променливата redStates дадена како аргумент на функцијата) подредени според големината на ГДП што ја имаат. Оваа функција треба да може директно да пристапува кон приватните членови на State класата

#include <iostream>
#include <cstring>
using namespace std;

class State;

class County {
    char name[50];
    float gdp;

    friend class State;
    friend void printStatesInGDPOrderByStateType(State states[], int numStates, bool redStates);

public:
    County(const char *name = "", float GDP = 0) {
        strcpy(this->name, name);
        this->gdp = GDP;
    }
    const char *getName() {
        return this->name;
    }
    float getGDP() {
        return this->gdp;
    }
};
class State {
    County counties[100];
    char name[100];
    int num;
    static float federalTax;
    bool redState;

    friend void printStatesInGDPOrderByStateType(State states[], int numStates, bool redStates);

public:
    State() {
        strcpy(this->name, "");
        this->num = 0;
        this->federalTax = 0;
        this->redState = false;
    }
    State(County counties[], const char *name, int number, bool rs) {
        strcpy(this->name, name);
        this->num = number;
        this->redState = rs;
        for (int i = 0; i < 100; i++) {
            this->counties[i] = counties[i];
        }
    }
    const char *getName() {
        return this->name;
    }
    int getNum() {
        return this->num;
    }
    void increaseFederalTax(int increase) {
        this->federalTax += increase;
    }
    float getFullGDP() {
        float total = 0;
        for (int i = 0; i < num; i++) {
            float afterTax = counties[i].getGDP() * (1-federalTax/100.0);
            total += afterTax;
        }
        return total;
    }
    void print() {
        cout << "State of " << name << endl;
        for (int i = 0; i < num; i++) {
            cout << counties[i].getName() << " " << endl;
        }
    }
    static void setFederalTax(float tax) {
        federalTax = tax;
    }
    static float getFederalTax() {
        return federalTax;
    }
    static void increaseFederalTax(float increase) {
        federalTax += increase;
    }
};
void printStatesInGDPOrderByStateType(State states[], int numStates, bool redStates) {
    State filtered[100]; // ќе ги собереме само државите што се red или blue
    int filteredCount = 0;

    for (int i = 0; i < numStates; i++) {
        if (states[i].redState == redStates) {
            // Вметнување на правилна позиција во filtered
            int position = filteredCount;

            for (int j = 0; j < filteredCount; j++) {
                if (states[i].getFullGDP() > filtered[j].getFullGDP()) {
                    position = j;
                    break;
                }
            }

            // shift надесно
            for (int j = filteredCount; j > position; j--) {
                filtered[j] = filtered[j - 1];
            }

            filtered[position] = states[i];
            filteredCount++;
        }
    }

    // Испечати ги имињата на сортираните држави
    for (int i = 0; i < filteredCount; i++) {
        cout << filtered[i].getName() << endl;
    }
}
//main should remain unchanged!
float State::federalTax = 15.5;

int main() {
    int n;
    cin >> n;
    char name[30] = "Richmond";
    County counties[3];
    counties[0] = County(name, 20);
    strcpy(name, "Bronx");
    counties[1] = County(name, 57);
    strcpy(name, "New York");
    counties[2] = County(name, 32);
    State state(counties, name, 3, false);
    switch(n){
        case 1: {
            cout << "---Testing constructors, getters, setters---" << endl;
            float fed;
            cin >> fed;
            State::setFederalTax(fed);
            if (State::getFederalTax() == 15.5) {
                cout << "State federal tax setter not OK!";
                break;
            }
            cout << counties[2].getName() << " Federal tax: " << State::getFederalTax() << " Full GDP: "
                 << state.getFullGDP();
            break;
        }
        case 2: {
            cout << "---Testing print method---" << endl;
            char name2[50];
            cin >> name2;
            County counties2[4];
            for (int i = 0; i < 3; ++i) {
                counties2[i] = counties[i];
            }
            counties2[3] = County(name2, 27);
            State state2(counties2, name, 4, false);
            state2.print();
            break;
        }
        case 3: {
            cout << "---Testing increaseFederalTax static method---" << endl;
            float increase;
            cin >> increase;
            cout << State::getFederalTax() << endl;
            State::increaseFederalTax(increase);
            cout << State::getFederalTax() << endl;
            cout << state.getFullGDP();
            break;
        }
        default:
            cout << "---Testing printStatesInGDPOrderByStateType---" << endl;
            County counties2[4];
            for (int i = 0; i < 3; ++i) {
                counties2[i] = counties[i];
            }
            strcpy(name, "Wayme");
            counties2[3] = County(name, 27);
            strcpy(name, "Ohio");
            State state2(counties2, name, 4, false);
            int numStates;
            cin >> numStates;
            numStates = numStates + 2;
            State states[numStates];
            states[0] = state;
            states[1] = state2;
            bool redStateSType;
            for (int i = 2; i < numStates; ++i) {
                char stateName[30];
                int numCounties;
                cin >> stateName >> numCounties >> redStateSType;
                County county[numCounties];
                for (int j = 0; j < numCounties; ++j) {
                    char ime[30];
                    int GDP;
                    cin >> ime >> GDP;
                    county[j] = County(ime, GDP);
                }
                states[i] = State(county, stateName, numCounties, redStateSType);
            }
            cout << "Red states: "<<endl;
            printStatesInGDPOrderByStateType(states, numStates, true);
            cout << "Blue states: "<<endl;
            printStatesInGDPOrderByStateType(states, numStates, false);

    }
    return 0;
}
