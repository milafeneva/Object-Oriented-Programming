Да се дефинира класа SMS, во која ќе се чуваат информации за датумот на пораката (објект од класа Date), содржина на пораката (низа од 150 карактери) и два телефонски броја (текстуални низи од 10 цифри за број кој испраќа и број кој прима). (10 поени) Класата Date треба да содржи три цели броеви за ден, месец и година. (5 поени)

Да се напише main функција во која се чита цел броj N (max 500), a потоа информации за N пораки. Читањето на една порака е во следниот формат:

dd mm yyyy број_што_праќа број_што_прима содржина. (10 поени)

Потоа, треба да се прочита уште еден датум кој означува почеток на временскиот период од тој датум до денес.

Пример влез:

18 03 2016 070211123 071300400 I'll call you back

.... пораки

18 12 2017 070211123 071300400 hahah

11 11 2015

На екран да се испечатат сите пораки кои се пократки од 70 карактери и се направени после внесен датум (не вклучувајќи ги и пораките направени на самиот тој датум). Да се искористи посебна функција која како аргументи прима: низа од објекти од класата SMS, големина на низата со пораки (цел број) и датум (објект од класата Date) кој означува почеток на временскиот период. Доколку не постојат пораки со бараниот услов, да се испечати соодветна порака (15 поени).

Форматот на печатење да се види од тест примерите.
#include <iomanip>
#include <iostream>
#include <set>
#include <string.h>
using namespace std;

class SMS;
class Date {
    int day;
    int month;
    int year;
    public:
    Date(int day = 1, int month = 1, int year = 2025)
        : day(day),
          month(month),
          year(year) {
    }
    void print() {
        // cout << setfill('0')<< set(2) << day << "/" << setfill('0')<< month << "/" << setfill('0')<< year << endl;
        cout << day << "/" << month << "/" << year;
    }
    bool isAfter(Date & other) {
        if(this->year > other.year) {
            return true;
        } else if (this->year < other.year) {
            return false;
        } else {
            if(this->month > other.month) {
                return true;
            } else if (this->month < other.month) {
                return false;
            } else {
                if (this->day > other.day) {
                    return true;
                } else if(this->day < other.day) {
                    return false;
                }
            }
        }
    }
    friend void filter(SMS messages[20], int n, Date &start);
};
class SMS {
private:
    Date date;
    char content[151];
    char sender[10];
    char receiver[10];
public:
    SMS(const Date &date = Date(), char *content = " ", char *sender = " ", char *receiver = " ") {
        this->date = date;
        strcpy(this->content, content);
        strcpy(this->sender, sender);
        strcpy(this->receiver, receiver);
    }
    void print() {
        date.print();
        cout <<sender << " " << receiver << " " << content << endl;
    }
    friend void filter(SMS messages[20], int n, Date &start);
    int getContentLength() {
        return strlen(content);
    }
};
//referenca za da ne se povika copy const
//ne e zadolzitelno
void filter(SMS messages[20], int n, Date &start) {
    int counter = 0;
    for (int i = 0; i < n; i++) {
        if (messages[i].getContentLength() < 70 && messages[i].date.isAfter(start)) {
            messages[i].print();
            counter++;
        }
    }
    if (counter == 0) {
        cout << "No date is found" << endl;
    }
}

int main() {
    int n;
    cin >> n;
    SMS messages[20];
    int day;
    int month;
    int year;
    char content[151];
    char sender[10];
    char receiver[10];
    for (int i = 0; i < n; i++) {
        cin >> day >> month >> year >> sender >> receiver;
        cin.ignore();
        cin.getline(content, 151);
        messages[i] = SMS(Date(day, month, year), content, sender, receiver);
    }
    cin >> day >> month >> year;
    Date start(day, month, year);
    filter(messages, n, start);

}
