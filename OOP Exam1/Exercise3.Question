#include <iostream>
#include <iomanip>
#include <cstring>
#include <fstream>
using namespace std;

class StockRecord {
    char id[12];
    char name[50];
    float price;
    float priceNow;
    int num;
public:
    StockRecord(const char *id = " ", const char *name = " ", float _price = 0, int actions = 0) {
        strcpy(this->id, id);
        strcpy(this->name, name);
        this->price = _price;
        this->num = actions;
    }
    void setNewPrice(double c) {
        priceNow = c;
    }
    double value() {
        return num * priceNow;
    }
    double profit() const {
        return num * (priceNow - price);
    }
    friend ostream &operator<<(ostream &out, const StockRecord &s) {
        out<<s.name<<" "<<s.num<<" "<<s.price<<" "<<s.priceNow<<" "<<s.profit()<<endl;
        return out;
    }
};
class Client {
    char name[60];
    int id;
    StockRecord *companies;
    int n;
    // StockRecord companiess[50];
    void copy(const Client &c) {
        strcpy(name, c.name);
        id = c.id;
        n = c.n;
        companies = new StockRecord[c.n];
        for (int i = 0; i < c.n; i++) {
            companies[i]= c.companies[i];
        }
    }
    public:
    Client(const char *name_ = " ", int id_ = 000000) {
        strcpy(this->name, name_);
        this->id = id_;
        companies = nullptr;
        n = 0;
    }
    // Client() {
    //     strcpy(name, "");
    //     id = 0;
    //     n = 0;
    //     for (int i = 0; i < 50; i++) {
    //         companiess[i] = StockRecord();
    //     }
    // }
    // Client(const char *name, int id, int n) {
    //     strcpy(this->name, name);
    //     this->id = id;
    //     this->n = n;
    //     for (int i = 0; i < 50; i++) {
    //         companiess[i] = StockRecord();
    //     }
    // }
    Client(const Client &c) {
        copy(c);
    }
    Client &operator=(const Client &c) {
        if (this!=&c) {
            delete [] companies;
            copy(c);
        }
        return *this;
    }
    ~Client() {
        delete[] companies;
    }
    double totalValue() const {
        double total = 0.0;
        for (int i = 0; i < n; i++) {
            total += companies[i].value();
        }
        return total;
    }
    Client &operator+=(StockRecord &s) {
        StockRecord *new_s = new StockRecord[n+1];
        for (int i=0;i<n;i++) {
            new_s[i] = companies[i];
        }
        new_s[n]=s;
        delete [] companies;
        companies=new_s;
        n++;
        return *this;
    }
    friend ostream &operator<<(ostream &out, const Client &c) {
        out<<c.id<<" "<<c.totalValue()<<endl;
        for (int i=0;i<c.n;i++) {
            out<<c.companies[i];
        }
        return out;
    }
};

int main(){

    int test;
    cin >> test;

    if(test == 1){
        double price;
        cout << "=====TEST NA KLASATA StockRecord=====" << endl;
        StockRecord sr("1", "Microsoft", 60.0, 100);
        cout << "Konstruktor OK" << endl;
        cin >> price;
        sr.setNewPrice(price);
        cout << "SET metoda OK" << endl;
    }
    else if(test == 2){
        cout << "=====TEST NA METODITE I OPERATOR << OD KLASATA StockRecord=====" << endl;
        char id[12], company[50];
        double price, newPrice;
        int n, shares;
        cin >> n;
        for(int i = 0; i < n; ++i){
            cin >> id;
            cin >> company;
            cin >> price;
            cin >> newPrice;
            cin >> shares;
            StockRecord sr(id, company, price, shares);
            sr.setNewPrice(newPrice);
            cout << sr.value() << endl;
            cout << sr;
        }
    }
    else if(test == 3){
        cout << "=====TEST NA KLASATA Client=====" << endl;
        char companyID[12], companyName[50], clientName[50];
        int clientID, n, shares;
        double oldPrice, newPrice;
        bool flag = true;
        cin >> clientName;
        cin >> clientID;
        cin >> n;
        Client c(clientName, clientID);
        cout << "Konstruktor OK" << endl;
        for(int i = 0; i < n; ++i){
            cin >> companyID;
            cin >> companyName;
            cin >> oldPrice;
            cin >> newPrice;
            cin >> shares;
            StockRecord sr(companyID, companyName, oldPrice, shares);
            sr.setNewPrice(newPrice);
            c += sr;
            if(flag){
                cout << "Operator += OK" << endl;
                flag = false;
            }
        }
        cout << c;
        cout << "Operator << OK" << endl;
    }
    return 0;

}
