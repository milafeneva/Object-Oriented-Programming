Да се напише класа Datum во која ќе се чуваат ден, месец и година (цели броеви).

Да се напише класа Vraboten во која се чува име на вработениот (не повеќе од 20 знаци), плата и датум на раѓање (објект од класата Datum).

Да се напишат две функции кои како аргументи примаат низа од вработени и големина на низата. 
Едната функција го враќа вработениот со најголема плата, а другата функција го враќа најмладиот вработен во фирмата.

Во главната програма потребно е да се испечатат на екран податоците за најмалдиот и најплатениот вработен. 
Печатењето на вработениот да биде реализирано со посебна функција print() во рамките на класата Vraboten.

#include <iostream>
#include <string.h>
using namespace std;

class Date {
    int day;
    int month;
    int year;
public:
    Date(int _day = 1, int _month = 1, int _year = 2000) {
        day = _day;
        month = _month;
        year = _year;
    }
    Date (const Date& d) {
        day = d.day;
        month = d.month;
        year = d.year;
    }
    ~Date () {}
    void print() {
        cout << day << "." << month << "." << year << endl;
    }
    int compare(Date &date) {
        if (year > date.year) {
            return 1;
        } else if (year < date.year) {
            return -1;
        } else {
            if (month > date.month) {
                return 1;
            } else if (month < date.month) {
                return -1;
            } else {
                if (day > date.day) {
                    return 1;
                } else if (day < date.day) {
                    return -1;
                } else {
                    return 0;
                }
            }
        }
    }
};
class Employee {
    char name[50];
    int salary;
    Date dateOfBirth;
public:
    Employee(char *_name, int _salary, Date _dateOfBirth) {
        strcpy(name, _name);
        salary = _salary;
        dateOfBirth = _dateOfBirth;
    }
    Employee() {
        strcpy (name, "");
        salary = 0;
    }
    Employee(const Employee& e) {
        strcpy(name, e.name);
        salary = e.salary;
        dateOfBirth = e.dateOfBirth;
    }
    ~Employee() {}
    friend Employee highestPaidEmployee(Employee *employees, int n);
    friend Employee youngestEmployee(Employee *employee, int n);
    void  print() {
        cout << "Name: " << name << endl;
        cout << "Salary: " << salary << endl;
        dateOfBirth.print();
    }
};
Employee highestPaidEmployee(Employee *employees, int n) {
    Employee max = employees[0];
    for (int i = 1; i < n; i++) {
        if (employees[i].salary > max.salary) {
            max = employees[i];
        }
    }
    return max;
}
Employee youngestEmployee(Employee *employee, int n) {
    Employee min = employee[0];
    for (int i = 1; i < n; i++) {
        if (employee[i].dateOfBirth.compare(min.dateOfBirth) <0) {
            min = employee[i];
        }
    }
    return min;
}
int main() {
    int n;
    cin >> n;
    // cin.ignore();

    Employee employees[10];
    for (int i = 0; i < n; i++) {
        // cin.ignore();
        char name[20];
        int salary;
        int day, month, year;
        cin >> name >> salary >> day >> month >> year;
        Date dateOfBirth(day, month, year);
        employees[i] = Employee(name, salary, dateOfBirth);
    }
    highestPaidEmployee(employees, n).print();
    youngestEmployee(employees, n).print();
    // printf("%.2f", salary);
}
