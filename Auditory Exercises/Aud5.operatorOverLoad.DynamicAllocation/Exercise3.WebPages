#include <iostream>
#include <string.h>
using namespace std;

class WebPage {
    char url[100];
    char *content;
    void copy(const WebPage &wp) {
        strcpy(this->url, wp.url);
        this->content = new char[strlen(wp.content) + 1];
        strcpy(this->content, wp.content);
    }
public:
    WebPage(char *url = "https://finki.ukim.mk", char *content = "Web Site na FINKI") {
        strcpy(this->url, url);
        this->content = new char[strlen(content) + 1];
        strcpy(this->content, content);
    }
    WebPage(const WebPage &wp) {
        copy(wp);
    }
    WebPage &operator=(const WebPage &wp) {
        if (this != &wp) {
            delete[] content;
            copy(wp);
        }
        return *this;
    }
    ~WebPage() {
        delete[] content;
    }
    void print() {
        cout << url << endl << content << endl;
    }
    bool equal(const WebPage &wp) {
        return strcmp(this->url, wp.url) == 0;
    }
};

class WebServer {
    char name[30];
    WebPage *webPages;
    int size;
    void copy(const WebServer &ws) {
        strcpy(this->name, ws.name);
        this->size=ws.size;
        webPages = new WebPage[this->size];
        for (int i = 0; i < this->size; i++) {
            this->webPages[i] = ws.webPages[i];
            //bez operator= ke padne
        }
    }
public:
    //samo name bidejki otposle se dodavaat so add serverite
    WebServer(char *name="FINKI server") {
        this->size = 0;
        strcpy(this->name, name);
        this->webPages = new WebPage[size];
    }
    WebServer(const WebServer &ws) {
        copy(ws);
    }
    WebServer &operator=(const WebServer &ws) {
        if (this != &ws) {
            //briseme se so e dinamicki alocirano
            delete[] webPages;
            copy(ws);
        }
        return *this;
    }
    ~WebServer() {
        delete[] webPages;
    }
    void addPage(const WebPage &wp) {
        if (hasPage(wp))
            return;
        // for (int i = 0; i < size; i++) {
        //     if (webPages[i].equal(wp)) {
        //         return;
        //     }
        // }
        WebPage *temp = new WebPage[size+1];
        for (int i = 0; i < size; i++) {
            temp[i] = webPages[i];
        }
        temp[size++] = wp;
        delete[] webPages;
        webPages = temp;
    }
    void print() {
        cout << name << endl;
        for (int i = 0; i < size; i++) {
            webPages[i].print();
        }
    }
    bool hasPage(const WebPage &wp) {
        bool found = false;
        for (int i = 0; i < size; i++) {
            if (webPages[i].equal(wp)) {
                found = true;
                break;
            }
        }
    }
    void deletePage(const WebPage &wp) {
        if (hasPage(wp)) {
            WebPage *temp = new WebPage[size-1];
            int j = 0;
            for (int i = 0; i < size; i++) {
                if (!webPages[i].equal(wp)) {
                    temp[j++] = webPages[i];
                }
            }
            size--;
            delete[] webPages;
            webPages = temp;
        }
    }
};

int main() {
    WebPage wp;
    WebPage copy(wp);
    WebPage test;
    test = wp;
    // wp.print();     //default constructor
    // copy.print();   //copy constructor
    // test.print();   //operator=
    WebServer ws("FINKI");
    ws.addPage(wp);
    WebPage webPage("courses.finki.ukim.mk", "Moodle za potrebi na FINKI");
    ws.addPage(webPage);

    ws.addPage(copy);
    ws.addPage(test);
    ws.print();

}
