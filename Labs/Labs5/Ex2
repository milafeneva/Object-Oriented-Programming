Да се дефинира класа NBAPlayer за која ќе се чуваат:

    динамички алоцирана низа од карактери за името на играчот
    низа од максимум 40 карактери за тимот во кој играчот моментално настапува
    просечен број на поени на играчот оваа сезона (double)
    просечен број на асистенции на играчот оваа сезона (double)
    просечен број на скокови на играчот оваа сезона (double)

За потребите на класата да се дефинираат:

    default конструктор и конструктор со аргументи
    copy constructor и оператор =
    деструктор

    метод rating() кој го враќа рејтингот на кошаркарот кој се пресметува како:

    45% од поените + 30% од асистенциите + 25% од скоковите

    метод print() кој го печати играчот во следниот формат:

    Име - тим

    Points: поени

    Assists: асистенции

    Rebounds: скокови

    Rating: рејтинг

AllStarPlayer

Од претходната класа NBAPlayer да се изведе класата AllStarPlayer за која дополнително ќе се чуваат и:

    просечен број на поени на играчот од All Star натпреварите (double)
    просечен број на асистенции на играчот од All Star натпреварите (double)
    просечен број на скокови на играчот од All Star натпреварите (double)

За потребите на класата да се дефинираат:

    default конструктор
    конструктор кој прима објект од NBAPlayer и плус додатните информации (погледни main)
    конструктор кој ги прима сите аргументи (погледни main)
    copy constructor, оператор =, деструктор

    метод allStarRating() кој го враќа рејтингот на кошаркарот од All Star натпреварите и кој се пресметува како:

    30% од поените + 40% од асистенциите + 30% од скоковите

Да се препокријат методите:

    rating() кој го враќа просекот од обичниот рејтинг на кошаркарот и неговиот All Star рејтинг

    print() кој покрај основните информации за кошаркарот печати и:

    All Star Rating: рејтингот од All Star натпреварите

    New Rating: просечниот рејтинг

Input     

1
Nikola_Jokic Denver_Nuggets 18.3 6.1 10.6
Lonzo_Ball Los_Angeles_Lakers 10.2 7.2 6.9
Donovan_Mitchell Utah_Jazz 20.4 3.6 3.7
Ben_Simmons Philadelphia_76ers 16 8.2 8.2
Kristaps_Porzingis New_York_Knicks 22.7 1.2 6.6

    
Result
NBA PLAYERS:
=====================================
Nikola_Jokic - Denver_Nuggets
Points: 18.3
Assists: 6.1
Rebounds: 10.6
Rating: 12.715
Lonzo_Ball - Los_Angeles_Lakers
Points: 10.2
Assists: 7.2
Rebounds: 6.9
Rating: 8.475
Donovan_Mitchell - Utah_Jazz
Points: 20.4
Assists: 3.6
Rebounds: 3.7
Rating: 11.185
Ben_Simmons - Philadelphia_76ers
Points: 16
Assists: 8.2
Rebounds: 8.2
Rating: 11.71
Kristaps_Porzingis - New_York_Knicks
Points: 22.7
Assists: 1.2
Rebounds: 6.6
Rating: 12.225

#include <iostream>
#include <cstring>
using namespace std;

class NBAPlayer {
protected:
    char *name;
    char team[40];
    double points;
    double assists;
    double rebounds;

    void copy(const NBAPlayer &nba) {
        this->name = new char[strlen(nba.name) + 1];
        strcpy(this->name, nba.name);
        strcpy(this->team, nba.team);
        this->points = nba.points;
        this->assists = nba.assists;
        this->rebounds = nba.rebounds;
    }

    public:
    NBAPlayer(char *name = " ", char *team = " ", double points = 0, double assists = 0, double rebounds = 0) {
        this->name = new char[strlen(name) + 1];
        strcpy(this->name, name);
        strcpy(this->team, team);
        this->points = points;
        this->assists = assists;
        this->rebounds = rebounds;
    }
    NBAPlayer (const NBAPlayer &nba) {
        copy(nba);
    }
    ~NBAPlayer() {
        delete [] name;
    }
    NBAPlayer &operator=(const NBAPlayer &nba) {
        if (this != &nba) {
            delete [] name;
            copy(nba);
        }
        return *this;
    }
    double rating() {
        return 0.45*points + 0.3*assists + 0.25*rebounds;
    }
    void print() {
        cout << name << " - " << team << endl;
        cout << "Points: " << points << endl;
        cout << "Assists: " << assists << endl;
        cout << "Rebounds: " << rebounds << endl;
        cout << "Rating: " << rating() << endl;
    }
};
class AllStarPlayer: public NBAPlayer {
    double pointsAllStars;
    double assistsAllStars;
    double reboundsAllStars;
    void copyAllStar(const AllStarPlayer &asp) {
        pointsAllStars = asp.pointsAllStars;
        assistsAllStars = asp.assistsAllStars;
        reboundsAllStars = asp.reboundsAllStars;
    }
    public:
    AllStarPlayer() : NBAPlayer() {
        this->pointsAllStars = 0;
        this->assistsAllStars = 0;
        this->reboundsAllStars = 0;
    }
    AllStarPlayer(NBAPlayer &nba, double points = 0, double assists = 0, double rebounds = 0) : NBAPlayer(nba) {
        this->pointsAllStars = points;
        this->assistsAllStars = assists;
        this->reboundsAllStars = rebounds;
    }
    AllStarPlayer(char *name, char *team, double points, double assists, double rebounds,
                  double pointsAllStars, double assistsAllStars, double reboundsAllStars) : NBAPlayer(name, team, points, assists, rebounds) {
        this->pointsAllStars = pointsAllStars;
        this->assistsAllStars = assistsAllStars;
        this->reboundsAllStars = reboundsAllStars;
    }
    AllStarPlayer(const AllStarPlayer &asp) {
        copyAllStar(asp);
    }
    ~AllStarPlayer() {}
    AllStarPlayer &operator=(const AllStarPlayer &asp) {
        if (this != &asp) {
            NBAPlayer::operator=(asp);
            copyAllStar(asp);
        }
        return *this;
    }
    double allStarRating() {
        return 0.3 * pointsAllStars + 0.4 * assistsAllStars + 0.3 * reboundsAllStars;
    }
    double rating() {
        return (NBAPlayer::rating() + allStarRating()) / 2.0;
    }

    // Override print method
    void print() {
        NBAPlayer::print();
        cout << "All Star Rating: " << allStarRating() << endl;
        cout << "New Rating: " << rating() << endl;
    }
};

int main() {

    char name[50];
    char team[40];
    double points;
    double assists;
    double rebounds;
    double allStarPoints;
    double allStarAssists;
    double allStarRebounds;

    NBAPlayer * players = new NBAPlayer[5];
    AllStarPlayer * asPlayers = new AllStarPlayer[5];
    int n;
    cin >> n;

    if (n == 1) {

        cout << "NBA PLAYERS:" << endl;
        cout << "=====================================" << endl;
        for (int i = 0; i < 5; ++i) {
            cin >> name >> team >> points >> assists >> rebounds;
            players[i] = NBAPlayer(name,team,points,assists,rebounds);
            players[i].print();
        }
    }
    else if (n == 2) {

        for (int i=0; i < 5; ++i){
            cin >> name >> team >> points >> assists >> rebounds;
            cin >> allStarPoints >> allStarAssists >> allStarRebounds;
            players[i] = NBAPlayer(name,team,points,assists,rebounds);
            asPlayers[i] = AllStarPlayer(players[i],allStarPoints,allStarAssists,allStarRebounds);
        }

        cout << "NBA PLAYERS:" << endl;
        cout << "=====================================" << endl;
        for (int i=0; i < 5; ++i)
            players[i].print();

        cout << "ALL STAR PLAYERS:" << endl;
        cout << "=====================================" << endl;
        for (int i=0; i < 5; ++i)
            asPlayers[i].print();

    }
    else if (n == 3) {

        for (int i=0; i < 5; ++i){
            cin >> name >> team >> points >> assists >> rebounds;
            cin >> allStarPoints >> allStarAssists >> allStarRebounds;
            asPlayers[i] = AllStarPlayer(name, team, points, assists, rebounds,
                                         allStarPoints,allStarAssists,allStarRebounds);
        }
        cout << "ALL STAR PLAYERS:" << endl;
        cout << "=====================================" << endl;
        for (int i=0; i < 5; ++i)
            asPlayers[i].print();

    }

    delete [] players;
    delete [] asPlayers;
}
