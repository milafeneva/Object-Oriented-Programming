Да се креира класа WeatherData во која се чуваат податоци за временските услови за различни локации. Класата треба да ги содржи следните атрибути:

string location_id; - Единствен идентификатор за локацијата
string timestamp; - Кога се снимени временските податоци
double temperature; - Температура во Целзиусови степени
int humidity; - Процент на влажност
double wind_speed; - Брзина на ветер во км/ч
int precipitation; - Врнежи во милиметри
Потребно е да се имплементираат:

Default конструктор
Конструктор со параметри
Copy конструктор
Оператор за доделување 
Оператор за читање од влезен поток (>>)
Оператор за печатење (<<) во следниот формат:
Weather at location: <location_id>
<timestamp> | Temp: <temperature>°C Humidity: <humidity>% Wind: <wind_speed> km/h Precip: <precipitation> mm
Функцијата string WeatherAlert() која ги категоризира временските услови во три категории:
Severe - temperature > 35.0 или temperature < -10.0 или humidity > 90 или wind_speed > 30.0 или precipitation > 50
Warning - temperature > 30.0 или temperature < 0.0 или humidity > 80 или wind_speed > 20.0 или precipitation > 30
Normal - сите останати услови
Да се напише глобалната функција FilterByAlertLevel() која прима низа од WeatherData објекти, број на елементи и string параметар за нивото на алармирање. 
Како резултат функцијата враќа нова динамички алоцирана низа која ги содржи само временските податоци со специфицираното ниво на алармирање.

Податоците се дадени во датотеката text.txt во форматот: прв ред - број на test case, втор ред - број на елементи, 
секој следен ред содржи податоци за една временска станица (за читање на податоци за една станица користете го istream операторот од класата).

На почетокот во main() каде што има TODO да се вчитаат потребните податоци од датотека .

#include <iostream>
#include <string>
#include <fstream>
#include <cctype>
using namespace std;

void writeToFile() {
    ofstream file("text.txt");
    char c;
    while ((c = cin.get()) != '#') {
        file.put(c);
    }
    file.close();
}

class WeatherData {
private:
    string location_id;
    string timestamp;
    double temperature;
    int humidity;
    double wind_speed;
    int precipitation;

public:
    WeatherData(string location = " ", string timeS = " ", double temp = 0, int hum = 0,
        double speedW = 0, int prep = 0) {
        location_id = location;
        timestamp = timeS;
        temperature = temp;
        humidity = hum;
        wind_speed = speedW;
        precipitation = prep;
    }
    WeatherData(const WeatherData&other) {
        location_id = other.location_id;
        timestamp = other.timestamp;
        temperature = other.temperature;
        humidity = other.humidity;
        wind_speed = other.wind_speed;
        precipitation = other.precipitation;
    }
    WeatherData& operator=(const WeatherData& other) {
        if (this != &other) {
            location_id = other.location_id;
            timestamp = other.timestamp;
            temperature = other.temperature;
            humidity = other.humidity;
            wind_speed = other.wind_speed;
            precipitation = other.precipitation;
        }
        return *this;
    }
    friend istream& operator>>(istream& is, WeatherData& w) {
        is >> w.location_id >> w.timestamp >> w.temperature >> w.humidity >> w.wind_speed >> w.precipitation;
    }
    friend ostream& operator<<(ostream& os, const WeatherData& w) {
        os << "Weather at location: " << w.location_id << endl;
        os << w.timestamp << " Temp: " << w.temperature << " °C Humidity: " << w.humidity;
        os << "% Wind: " << w.wind_speed << " km/h Precip: " << w.precipitation << " mm" << endl;
        return os;
    }
    string WeatherAlert() {
        if (temperature > 35.0 || temperature < -10.0 || humidity > 90 ||
            wind_speed > 30.0 || precipitation > 50) {
            return "Severe";
        } else if (temperature > 30.0 || temperature < 0.0 || humidity > 80 ||
            wind_speed > 20.0 || precipitation > 30) {
            return "Warning";
        } else {
            return "Normal";
        }
    }
};
WeatherData* FilterByAlterLevel(WeatherData *data, int n, string level, int &outSize) {
    WeatherData *filteredData = new WeatherData[n];
    int count = 0;
    for (int i = 0; i < n; i++) {
        if (data[i].WeatherAlert() == level) {
            filteredData[count] = data[i];
            count++;
        }
    }
    outSize = count;
    return filteredData;
}
int main() {
    writeToFile();
    ifstream fin("text.txt");
    if (!fin) {
        std::cerr << "Cannot open file\n";
        return 1;
    }

    // TODO: Вчитајте податоци од датотека (број на тест примери (testCase), број на WeatherData записи (n) и податоци за WeatherData)
    int testCase, n;
    fin >> testCase >> n;
    WeatherData *records = new WeatherData[n];
    for (int i = 0; i < n; i++) {
        fin >>  records[i];
    }

    // Остатокот од кодот останува непроменет

    if (testCase == 1) {
        cout << "===== Testing Constructor, Istream Operator & OstreamOperator =====" << endl;
        for (int i = 0; i < n; i++) {
            cout << records[i];
        }
    }

    if (testCase == 2) {
        cout << "===== Testing WeatherAlert Function =====" << endl;
        for (int i = 0; i < n; i++) {
            cout << records[i].WeatherAlert() << endl;
        }
    }
}
