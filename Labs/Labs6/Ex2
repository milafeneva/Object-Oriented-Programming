2) –î–∞ —Å–µ –¥–µ—Ñ–∏–Ω–∏—Ä–∞ –∫–ª–∞—Å–∞ MovieActor –∑–∞ –∫–æ—ò–∞ —ú–µ —Å–µ —á—É–≤–∞–∞—Ç:

    –¥–∏–Ω–∞–º–∏—á–∫–∏ –∞–ª–æ—Ü–∏—Ä–∞–Ω–∞ –Ω–∏–∑–∞ –æ–¥ –∫–∞—Ä–∞–∫—Ç–µ—Ä–∏ –∑–∞ –∏–º–µ—Ç–æ –Ω–∞ –∞–∫—Ç–µ—Ä–æ—Ç
    –Ω–∏–∑–∞ –æ–¥ –º–∞–∫—Å–∏–º—É–º 40 –∫–∞—Ä–∞–∫—Ç–µ—Ä–∏ –∑–∞ –¥—Ä–∂–∞–≤–∞—Ç–∞ –æ–¥ –∫–æ—ò–∞ –ø–æ—Ç–µ–∫–Ω—É–≤–∞
    –ø—Ä–æ—Å–µ—á–Ω–∞ –æ—Ü–µ–Ω–∞ –Ω–∞ —Ñ–∏–ª–º–æ–≤–∏—Ç–µ –≤–æ –∫–æ–∏ –≥–ª—É–º–µ–ª –∞–∫—Ç–µ—Ä–æ—Ç –≥–æ–¥–∏–Ω–∞–≤–∞ (double)
    –≤–∫—É–ø–µ–Ω –±—Ä–æ—ò –Ω–∞ —Ñ–∏–ª–º–æ–≤–∏ –≥–æ–¥–∏–Ω–∞–≤–∞ (int)
    –≤–∫—É–ø–Ω–∞ –∑–∞—Ä–∞–±–æ—Ç–∫–∞ –æ–¥ —Ç–∏–µ —Ñ–∏–ª–º–æ–≤–∏ –≤–æ –º–∏–ª–∏–æ–Ω–∏ –¥–æ–ª–∞—Ä–∏ (double)

–ó–∞ –ø–æ—Ç—Ä–µ–±–∏—Ç–µ –Ω–∞ –∫–ª–∞—Å–∞—Ç–∞ –¥–∞ —Å–µ –¥–µ—Ñ–∏–Ω–∏—Ä–∞–∞—Ç:

    default –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –∏ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä —Å–æ –∞—Ä–≥—É–º–µ–Ω—Ç–∏
    copy constructor –∏ –æ–ø–µ—Ä–∞—Ç–æ—Ä =
    –¥–µ—Å—Ç—Ä—É–∫—Ç–æ—Ä
    –º–µ—Ç–æ–¥ rating() –∫–æ—ò –≥–æ –≤—Ä–∞—ú–∞ —Ä–µ—ò—Ç–∏–Ω–≥–æ—Ç –Ω–∞ –∞–∫—Ç–µ—Ä–æ—Ç –ø—Ä–µ—Å–º–µ—Ç–∞–Ω –∫–∞–∫–æ:

    (–ø—Ä–æ—Å–µ—á–Ω–∞_–æ—Ü–µ–Ω–∫–∞ * 0.4) + (–±—Ä–æ—ò_–Ω–∞_—Ñ–∏–ª–º–æ–≤–∏ * 0.2) + (–∑–∞—Ä–∞–±–æ—Ç–∫–∞ * 0.4)

    –º–µ—Ç–æ–¥ print() –∫–æ—ò –≥–∏ –ø–µ—á–∞—Ç–∏ –ø–æ–¥–∞—Ç–æ—Ü–∏—Ç–µ –≤–æ —Å–ª–µ–¥–Ω–∏–æ—Ç —Ñ–æ—Ä–º–∞—Ç:

    [–ò–º–µ] - [–¥—Ä–∂–∞–≤–∞]
    Average rating: [–ø—Ä–æ—Å–µ—á–Ω–∞ –æ—Ü–µ–Ω–∞]
    Movies this year: [–≤–∫—É–ø–µ–Ω –±—Ä–æ—ò]
    Total earnings: [–≤–∫—É–ø–Ω–∞ –∑–∞—Ä–∞–±–æ—Ç–∫–∞]
    Rating: [—Ä–µ—ò—Ç–∏–Ω–≥]

–û–¥ MovieActor –¥–∞ —Å–µ –∏–∑–≤–µ–¥–µ –∫–ª–∞—Å–∞ OscarWinner –∑–∞ –∫–æ—ò–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª–Ω–æ —ú–µ —Å–µ —á—É–≤–∞–∞—Ç:

    –ø—Ä–æ—Å–µ—á–Ω–∞ –æ—Ü–µ–Ω–∞ –Ω–∞ —Ñ–∏–ª–º–æ–≤–∏—Ç–µ –ø–æ –¥–æ–±–∏–µ–Ω–∏–æ—Ç –û—Å–∫–∞—Ä (double)
    –±—Ä–æ—ò –Ω–∞ —Ñ–∏–ª–º–æ–≤–∏ –ø–æ –¥–æ–±–∏–µ–Ω–∏–æ—Ç –û—Å–∫–∞—Ä (int)
    –≤–∫—É–ø–Ω–∞ –∑–∞—Ä–∞–±–æ—Ç–∫–∞ –æ–¥ —Ç–∏–µ —Ñ–∏–ª–º–æ–≤–∏ (double)

–ó–∞ –ø–æ—Ç—Ä–µ–±–∏—Ç–µ –Ω–∞ –∫–ª–∞—Å–∞—Ç–∞ –¥–∞ —Å–µ –¥–µ—Ñ–∏–Ω–∏—Ä–∞–∞—Ç:

    default –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä
    –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –∫–æ—ò –ø—Ä–∏–º–∞ –æ–±—ò–µ–∫—Ç –æ–¥ MovieActor –∏ –ø–ª—É—Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª–Ω–∏—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
    –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –∫–æ—ò –≥–∏ –ø—Ä–∏–º–∞ —Å–∏—Ç–µ –∞—Ä–≥—É–º–µ–Ω—Ç–∏ (–≤–∏–¥–µ—Ç–µ main)
    copy constructor, –æ–ø–µ—Ä–∞—Ç–æ—Ä =, –¥–µ—Å—Ç—Ä—É–∫—Ç–æ—Ä
    –º–µ—Ç–æ–¥ oscarRating() –∫–æ—ò –≥–æ –≤—Ä–∞—ú–∞ —Ä–µ—ò—Ç–∏–Ω–≥–æ—Ç –æ–¥ –ø–æ—Å—Ç-–û—Å–∫–∞—Ä —Ñ–∏–ª–º–æ–≤–∏—Ç–µ:

    (–ø–æ—Å—Ç-–æ—Å–∫–∞—Ä_–ø—Ä–æ—Å–µ—á–Ω–∞_–æ—Ü–µ–Ω–∫–∞ * 0.6) + (–ø–æ—Å—Ç-–æ—Å–∫–∞—Ä_–±—Ä–æ—ò_–Ω–∞_—Ñ–∏–ª–º–æ–≤–∏ * 0.1) + (–ø–æ—Å—Ç-–æ—Å–∫–∞—Ä_–∑–∞—Ä–∞–±–æ—Ç–∫–∞ * 0.3)

–î–∞ —Å–µ –ø—Ä–µ–ø–æ–∫—Ä–∏—ò–∞—Ç –º–µ—Ç–æ–¥–∏—Ç–µ:

    rating() –∫–æ—ò –≤—Ä–∞—ú–∞ –ø—Ä–æ—Å–µ–∫ –æ–¥ –æ—Å–Ω–æ–≤–Ω–∏–æ—Ç –∏ oscar —Ä–µ—ò—Ç–∏–Ω–≥
    print() –∫–æ—ò –ø–æ–∫—Ä–∞—ò –æ—Å–Ω–æ–≤–Ω–∏—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∑–∞ –∞–∫—Ç–µ—Ä–æ—Ç –ø–µ—á–∞—Ç–∏ –∏:

    Oscar Rating: [—Ä–µ—ò—Ç–∏–Ω–≥]
    New Rating: [–ø—Ä–æ—Å–µ—á–Ω–∏–æ—Ç]
Input
2
3
Leonardo_DiCaprio USA 8.5 3 150.0
9.2 4 200.0
Tom_Hanks USA 9.0 5 200.0
9.5 6 250.0
Meryl_Streep USA 9.5 4 120.0
9.8 7 300.0

Expected
MOVIE ACTORS:
=====================================
Leonardo_DiCaprio - USA
Average rating: 8.5
Movies this year: 3
Total earnings: 150
Rating: 64
-------------------------
Tom_Hanks - USA
Average rating: 9
Movies this year: 5
Total earnings: 200
Rating: 84.6
-------------------------
Meryl_Streep - USA
Average rating: 9.5
Movies this year: 4
Total earnings: 120
Rating: 52.6
-------------------------
OSCAR WINNERS:
=====================================
Leonardo_DiCaprio - USA
Average rating: 8.5
Movies this year: 3
Total earnings: 150
Rating: 64.96
Oscar Rating: 65.92
New Rating: 64.96
-------------------------
Tom_Hanks - USA
Average rating: 9
Movies this year: 5
Total earnings: 200
Rating: 82.95
Oscar Rating: 81.3
New Rating: 82.95
-------------------------
Meryl_Streep - USA
Average rating: 9.5
Movies this year: 4
Total earnings: 120
Rating: 74.59
Oscar Rating: 96.58
New Rating: 74.59
-------------------------

mila
m026447
Invisible

bb ‚Äî Yesterday at 10:25
da ne beshe nekoj od sabajle na labs oop
aki ‚Äî Yesterday at 12:06
moze li nekoj sto bil na labs sabajle oop da gi kaze zadacite
groma ‚Äî Yesterday at 12:27
labs denes ?
Fuantei ‚Äî Yesterday at 12:47
ova nedela labs za sho ke se
za apstraktni klasi ili?
blueberry ‚Äî Yesterday at 12:49
Ne be nema labs za apstraktni uste
mislam rano e za toa
aki ‚Äî Yesterday at 13:32
moze nekoj da kaze sto imase?
Fuantei ‚Äî Yesterday at 13:34
abe deka denes zedovme bukvalno
apstraktni klasii prazna virtuelna funkcija
i povekekratno nasleduvanje
znachi ova nedela ke e za polimorfizam ili?
blueberry ‚Äî Yesterday at 14:03
bi trebalo
groma ‚Äî Yesterday at 14:08
nekoj da pustit sho imase ?
Booker3010 ‚Äî Yesterday at 14:37
tie so minete kval bez zeleni zadaci kazete malku tips and tricks i nie obicnite smrtnici da pomineme ;))
blueberry ‚Äî Yesterday at 14:54
pisuvaj konstruktor 2 vo 1 stefan kako so pisuva mesto 3 posebni oti moes vo edniot od trite na primer da zaboravis vrednost na 0 da setiras..jas taka padnav
Booker3010 ‚Äî Yesterday at 14:55
abe konstruktor mozebi nauciv da pravam
ama da se lizam na asistenti za da pominam bez zelena, ne nauciv
:))
NacMac ‚Äî Yesterday at 14:56
dzabe ti e i da naucis, nikoj taka ne pominal üôÇ
Booker3010 ‚Äî Yesterday at 14:57
pa ne znam bash
blueberry ‚Äî Yesterday at 14:57
moze pomos malce?
#include <iostream>
#include <cstring>
using namespace std;

class Nedviznina {
protected:
Expand
message.txt
3 KB
Image
nalseudvanje labsot
ne mi premsetuva tocen danok
diiaanaa ‚Äî Yesterday at 15:24
Formulata kaj danok na imot treba da e 
Cena()*(5+danok)/100.0
blueberry ‚Äî Yesterday at 15:24
fala
ninja ‚Äî Yesterday at 15:31
–õ–∞–±–æ—Ä–∞—Ç–æ—Ä–∏—Å–∫–∞ –≤–µ–∂–±–∞ 7 - –ø–æ–Ω–µ–¥–µ–ª–Ω–∏–∫:
1) –ü–æ—Ç—Ä–µ–±–Ω–æ –µ –¥–∞ –¥–∏–∑–∞—ò–Ω–∏—Ä–∞—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–∞ –∑–∞ —Å–∏—Å—Ç–µ–º –∑–∞ —Ö–æ—Ç–µ–ª—Å–∫–∏ —Ä–µ–∑–µ—Ä–≤–∞—Ü–∏–∏. –ó–∞ —Ç–∞–∞ —Ü–µ–ª –ø–æ—Ç—Ä–µ–±–Ω–æ –µ –¥–∞ –∏–∑—Ä–∞–±–æ—Ç–∏—Ç–µ –∫–ª–∞—Å–∞ Room –∫–æ—ò–∞ —à—Ç–æ —ú–µ –≥–∏ –∏–º–∞ —Å–ª–µ–¥–Ω–∏—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏:

    –±—Ä–æ—ò –Ω–∞ —Å–æ–±–∞ - —Ü–µ–ª –±—Ä–æ—ò
    —Ü–µ–Ω–∞ –∑–∞ –Ω–æ—ú–µ–≤–∞—ö–µ - —Ü–µ–ª –±—Ä–æ—ò

–ó–∞ –æ–≤–∞–∞ –∫–ª–∞—Å–∞ –ø–æ—Ç—Ä–µ–±–Ω–æ –µ –¥–∞ –∫—Ä–µ–∏—Ä–∞—Ç–µ:

    Default –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä
    –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä —Å–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏
    Copy –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä
    –û–ø–µ—Ä–∞—Ç–æ—Ä =
    –§—É–Ω–∫—Ü–∏—ò–∞ –∫–æ—ò–∞ —à—Ç–æ —ò–∞ –≤—Ä–∞—ú–∞ —Ü–µ–Ω–∞—Ç–∞ –∑–∞ –µ–¥–Ω–æ –Ω–æ—ú–µ–≤–∞—ö–µ (getPrice)
    –§—É–Ω–∫—Ü–∏—ò–∞ print —à—Ç–æ –≥–∏ –ø–µ—á–∞—Ç–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏—Ç–µ –∑–∞ —Å–æ–±–∞—Ç–∞ –≤–æ —Ñ–æ—Ä–º–∞—Ç:
    [–±—Ä–æ—ò –Ω–∞ —Å–æ–±–∞] - [—Ü–µ–Ω–∞ –∑–∞ –Ω–æ—ú–µ–≤–∞—ö–µ] euros

–ü–æ–Ω–∞—Ç–∞–º—É, —Ç—Ä–µ–±–∞ –¥–∞ –∫—Ä–µ–∏—Ä–∞—Ç–µ –∫–ª–∞—Å–∞ StandardRoom. –ö–ª–∞—Å–∞—Ç–∞ —Ç—Ä–µ–±–∞ –¥–∞ –Ω–∞—Å–ª–µ–¥—É–≤–∞ –æ–¥ –∫–ª–∞—Å–∞—Ç–∞ Room –∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª–Ω–æ –¥–∞ –≥–∏ –∏–º–∞ —Å–ª–µ–¥–Ω–∏–≤–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏:

    hasBalcony  - bool –ø—Ä–æ–º–µ–Ω–ª–∏–≤–∞ 
–ó–∞ –æ–≤–∞–∞ –∫–ª–∞—Å–∞ –ø–æ—Ç—Ä–µ–±–Ω–æ –µ –¥–∞ –∫—Ä–µ–∏—Ä–∞—Ç–µ:

    Default –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä
    –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä —Å–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏
    –§—É–Ω–∫—Ü–∏—ò–∞ —à—Ç–æ —ò–∞ –≤—Ä–∞—ú–∞ —Ü–µ–Ω–∞—Ç–∞ –∑–∞ –µ–¥–Ω–æ –Ω–æ—ú–µ–≤–∞—ö–µ (getPrice) –∫–æ—ò–∞ —à—Ç–æ —Å–µ –ø—Ä–µ—Å–º–µ—Ç—É–≤–∞ —Ç–∞–∫–∞ —à—Ç–æ –¥–æ–∫–æ–ª–∫—É —Å–æ–±–∞—Ç–∞ –∏–º–∞ –±–∞–ª–∫–æ–Ω, —Å–µ –æ–¥–∑–µ–º–∞ 5% –æ–¥ —Ü–µ–Ω–∞—Ç–∞ —à—Ç–æ —ò–∞ –¥–æ–±–∏–≤–∞—Ç–µ –æ–¥ –∫–ª–∞—Å–∞—Ç–∞ Room. –î–æ–∫–æ–ª–∫—É —Å–æ–±–∞—Ç–∞ –Ω–µ–º–∞ –±–∞–ª–∫–æ–Ω,—Ü–µ–Ω–∞—Ç–∞ –∑–∞ –µ–¥–Ω–æ –Ω–æ—ú–µ–≤–∞—ö–µ –µ –æ–Ω–∞–∞ —à—Ç–æ —ò–∞ –¥–æ–±–∏–≤–∞—Ç–µ –æ–¥ –∫–ª–∞—Å–∞—Ç–∞ Room. –ü—Ä–∏–º–µ—Ä, –¥–æ–∫–æ–ª–∫—É —Ü–µ–Ω–∞—Ç–∞ –∑–∞ –Ω–æ—ú–µ–≤–∞—ö–µ —à—Ç–æ —ò–∞ –¥–æ–±–∏–≤–∞—Ç–µ –æ–¥ –∫–ª–∞—Å–∞—Ç–∞ Room –µ 60 –µ–≤—Ä–∞ –∏ —Å–æ–±–∞—Ç–∞ –∏–º–∞ –±–∞–ª–∫–æ–Ω, —Ç–æ–≥–∞—à –æ–≤–¥–µ —Ñ—É–Ω–∫—Ü–∏—ò–∞—Ç–∞ —Ç—Ä–µ–±–∞ –¥–∞ –≤—Ä–∞—Ç–∏ 57 –µ–≤—Ä–∞ –∑–∞—Ç–æ–∞ —à—Ç–æ 60 - 60 0.05 = 57.
    –§—É–Ω–∫—Ü–∏—ò–∞ print —à—Ç–æ –≥–∏ –ø–µ—á–∞—Ç–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏—Ç–µ –∑–∞ —Å–æ–±–∞—Ç–∞ –≤–æ —Ñ–æ—Ä–º–∞—Ç:   [–±—Ä–æ—ò –Ω–∞ —Å–æ–±–∞] - [—Ü–µ–Ω–∞ –∑–∞ –Ω–æ—ú–µ–≤–∞—ö–µ] euros.  –î–æ–∫–æ–ª–∫—É –∏–º–∞ –±–∞–ª–∫–æ–Ω –¥–æ–¥–∞–¥–µ—Ç–µ 'has a balcony', –¥–æ–∫–æ–ª–∫—É –Ω–µ–º–∞ –±–∞–ª–∫–æ–Ω –¥–æ–¥–∞–¥–µ—Ç–µ 'without balcony'.

–ü–æ–Ω–∞—Ç–∞–º—É, —Ç—Ä–µ–±–∞ –¥–∞ –∫—Ä–µ–∏—Ä–∞—Ç–µ –∫–ª–∞—Å–∞ LuxuryRoom –∫–æ—ò–∞ —Ç—Ä–µ–±–∞ –¥–∞ –Ω–∞—Å–ª–µ–¥—É–≤–∞ –æ–¥ –∫–ª–∞—Å–∞—Ç–∞ Room –∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª–Ω–æ –¥–∞ –≥–∏ –∏–º–∞ —Å–ª–µ–¥–Ω–∏–≤–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏:

    hasJacuzzi - bool –ø—Ä–æ–º–µ–Ω–ª–∏–≤–∞

–ó–∞ –æ–≤–∞–∞ –∫–ª–∞—Å–∞ –ø–æ—Ç—Ä–µ–±–Ω–æ –µ –¥–∞ –∫—Ä–µ–∏—Ä–∞—Ç–µ:

    Default –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä
    –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä —Å–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏
    –§—É–Ω–∫—Ü–∏—ò–∞ —à—Ç–æ —ò–∞ –≤—Ä–∞—ú–∞ —Ü–µ–Ω–∞—Ç–∞ –∑–∞ –µ–¥–Ω–æ –Ω–æ—ú–µ–≤–∞—ö–µ (getPrice) –∫–æ—ò–∞ —à—Ç–æ —Å–µ –ø—Ä–µ—Å–º–µ—Ç—É–≤–∞ —Ç–∞–∫–∞ —à—Ç–æ –¥–æ–∫–æ–ª–∫—É —Å–æ–±–∞—Ç–∞ –∏–º–∞ —ü–∞–∫—É–∑–∏, —Å–µ –¥–æ–¥–∞–≤–∞ 20% –æ–¥ —Ü–µ–Ω–∞—Ç–∞ —à—Ç–æ —ò–∞ –¥–æ–±–∏–≤–∞—Ç–µ –æ–¥ –∫–ª–∞—Å–∞—Ç–∞ Room.–î–æ–∫–æ–ª–∫—É —Å–æ–±–∞—Ç–∞ –Ω–µ–º–∞ —ü–∞–∫—É–∑–∏,—Ü–µ–Ω–∞—Ç–∞ –∑–∞ –µ–¥–Ω–æ –Ω–æ—ú–µ–≤–∞—ö–µ –µ –æ–Ω–∞–∞ —à—Ç–æ —ò–∞ –¥–æ–±–∏–≤–∞—Ç–µ –æ–¥ –∫–ª–∞—Å–∞—Ç–∞ Room.–ü—Ä–∏–º–µ—Ä, –¥–æ–∫–æ–ª–∫—É —Ü–µ–Ω–∞—Ç–∞ –∑–∞ –Ω–æ—ú–µ–≤–∞—ö–µ —à—Ç–æ —ò–∞ –¥–æ–±–∏–≤–∞—Ç–µ –æ–¥ –∫–ª–∞—Å–∞—Ç–∞ Room –µ 60 –µ–≤—Ä–∞ –∏ —Å–æ–±–∞—Ç–∞ –∏–º–∞ —ü–∞–∫—É–∑–∏, —Ç–æ–≥–∞—à –æ–≤–¥–µ —Ñ—É–Ω–∫—Ü–∏—ò–∞—Ç–∞ —Ç—Ä–µ–±–∞ –¥–∞ –≤—Ä–∞—Ç–∏ 72 –µ–≤—Ä–∞ –∑–∞—Ç–æ–∞ —à—Ç–æ 60 + 600.2 = 72.
    –§—É–Ω–∫—Ü–∏—ò–∞ print —à—Ç–æ –≥–∏ –ø–µ—á–∞—Ç–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏—Ç–µ –∑–∞ —Å–æ–±–∞—Ç–∞ –≤–æ —Ñ–æ—Ä–º–∞—Ç:    [–±—Ä–æ—ò –Ω–∞ —Å–æ–±–∞] - [—Ü–µ–Ω–∞ –∑–∞ –Ω–æ—ú–µ–≤–∞—ö–µ] euros. –î–æ–∫–æ–ª–∫—É –∏–º–∞ —ü–∞–∫—É–∑–∏ –¥–æ–¥–∞–¥–µ—Ç–µ 'has a jacuzzi', –¥–æ–∫–æ–ª–∫—É –Ω–µ–º–∞ –¥–æ–¥–∞–¥–µ—Ç–µ 'without jacuzzi'.
Input
4
5
Standard 204 120 1
Luxury 205 180 1
Room 206 100
Standard 207 130 0
Luxury 208 220 1

Expected
204 - 114 euros has a balcony
205 - 216 euros has a jacuzzi
206 - 100 euros
207 - 130 euros without balcony
208 - 264 euros has a jacuzzi
Mainot –æ–¥ –ø—Ä–≤–∞—Ç–∞:
int main() {
    int testCase;
    cin >> testCase;

    if (testCase == 1) {
        // Test Room class
        int number, price;
        cin >> number >> price;
        Room r1(number, price);
        Room r2 = r1;  // Copy constructor
        Room r3;
        r3 = r1;       // Assignment operator

        r1.print();
        r2.print();
        r3.print();
    }
    else if (testCase == 2) {
        // Test StandardRoom
        int number, price;
        bool hasBalcony;
        cin >> number >> price >> hasBalcony;

        StandardRoom sr(number, price, hasBalcony);
        sr.print();
    }
    else if (testCase == 3) {
        // Test LuxuryRoom
        int number, price;
        bool hasJacuzzi;
        cin >> number >> price >> hasJacuzzi;

        LuxuryRoom lr(number, price, hasJacuzzi);
        lr.print();
    }
    else if (testCase == 4) {
        // Polymorphism test
        int n;
        cin >> n;
        Room* rooms[100];

        for (int i = 0; i < n; ++i) {
            string type;
            cin >> type;

            int number, price;
            cin >> number >> price;

            if (type == "Standard") {
                bool hasBalcony;
                cin >> hasBalcony;
                rooms[i] = new StandardRoom(number, price, hasBalcony);
            } else if (type == "Luxury") {
                bool hasJacuzzi;
                cin >> hasJacuzzi;
                rooms[i] = new LuxuryRoom(number, price, hasJacuzzi);
            } else {
                rooms[i] = new Room(number, price);
            }
        }

        for (int i = 0; i < n; ++i) {
            rooms[i]->print();
        }

        for (int i = 0; i < n; ++i) {
            delete rooms[i];
        }
    }

    return 0;
}
F_ili_P ‚Äî Yesterday at 15:33
Respect bratu
Us vtorata ak ja imas top
ninja ‚Äî Yesterday at 15:33
2) –î–∞ —Å–µ –¥–µ—Ñ–∏–Ω–∏—Ä–∞ –∫–ª–∞—Å–∞ MovieActor –∑–∞ –∫–æ—ò–∞ —ú–µ —Å–µ —á—É–≤–∞–∞—Ç:

    –¥–∏–Ω–∞–º–∏—á–∫–∏ –∞–ª–æ—Ü–∏—Ä–∞–Ω–∞ –Ω–∏–∑–∞ –æ–¥ –∫–∞—Ä–∞–∫—Ç–µ—Ä–∏ –∑–∞ –∏–º–µ—Ç–æ –Ω–∞ –∞–∫—Ç–µ—Ä–æ—Ç
    –Ω–∏–∑–∞ –æ–¥ –º–∞–∫—Å–∏–º—É–º 40 –∫–∞—Ä–∞–∫—Ç–µ—Ä–∏ –∑–∞ –¥—Ä–∂–∞–≤–∞—Ç–∞ –æ–¥ –∫–æ—ò–∞ –ø–æ—Ç–µ–∫–Ω—É–≤–∞
    –ø—Ä–æ—Å–µ—á–Ω–∞ –æ—Ü–µ–Ω–∞ –Ω–∞ —Ñ–∏–ª–º–æ–≤–∏—Ç–µ –≤–æ –∫–æ–∏ –≥–ª—É–º–µ–ª –∞–∫—Ç–µ—Ä–æ—Ç –≥–æ–¥–∏–Ω–∞–≤–∞ (double)
    –≤–∫—É–ø–µ–Ω –±—Ä–æ—ò –Ω–∞ —Ñ–∏–ª–º–æ–≤–∏ –≥–æ–¥–∏–Ω–∞–≤–∞ (int)
    –≤–∫—É–ø–Ω–∞ –∑–∞—Ä–∞–±–æ—Ç–∫–∞ –æ–¥ —Ç–∏–µ —Ñ–∏–ª–º–æ–≤–∏ –≤–æ –º–∏–ª–∏–æ–Ω–∏ –¥–æ–ª–∞—Ä–∏ (double)

–ó–∞ –ø–æ—Ç—Ä–µ–±–∏—Ç–µ –Ω–∞ –∫–ª–∞—Å–∞—Ç–∞ –¥–∞ —Å–µ –¥–µ—Ñ–∏–Ω–∏—Ä–∞–∞—Ç:

    default –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –∏ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä —Å–æ –∞—Ä–≥—É–º–µ–Ω—Ç–∏
    copy constructor –∏ –æ–ø–µ—Ä–∞—Ç–æ—Ä =
    –¥–µ—Å—Ç—Ä—É–∫—Ç–æ—Ä
    –º–µ—Ç–æ–¥ rating() –∫–æ—ò –≥–æ –≤—Ä–∞—ú–∞ —Ä–µ—ò—Ç–∏–Ω–≥–æ—Ç –Ω–∞ –∞–∫—Ç–µ—Ä–æ—Ç –ø—Ä–µ—Å–º–µ—Ç–∞–Ω –∫–∞–∫–æ:

    (–ø—Ä–æ—Å–µ—á–Ω–∞–æ—Ü–µ–Ω–∫–∞ * 0.4) + (–±—Ä–æ—ò–Ω–∞—Ñ–∏–ª–º–æ–≤–∏ * 0.2) + (–∑–∞—Ä–∞–±–æ—Ç–∫–∞ * 0.4)

    –º–µ—Ç–æ–¥ print() –∫–æ—ò –≥–∏ –ø–µ—á–∞—Ç–∏ –ø–æ–¥–∞—Ç–æ—Ü–∏—Ç–µ –≤–æ —Å–ª–µ–¥–Ω–∏–æ—Ç —Ñ–æ—Ä–º–∞—Ç:

    [–ò–º–µ] - [–¥—Ä–∂–∞–≤–∞]
    Average rating: [–ø—Ä–æ—Å–µ—á–Ω–∞ –æ—Ü–µ–Ω–∞]
    Movies this year: [–≤–∫—É–ø–µ–Ω –±—Ä–æ—ò]
    Total earnings: [–≤–∫—É–ø–Ω–∞ –∑–∞—Ä–∞–±–æ—Ç–∫–∞]
    Rating: [—Ä–µ—ò—Ç–∏–Ω–≥]

–û–¥ MovieActor –¥–∞ —Å–µ –∏–∑–≤–µ–¥–µ –∫–ª–∞—Å–∞ OscarWinner –∑–∞ –∫–æ—ò–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª–Ω–æ —ú–µ —Å–µ —á—É–≤–∞–∞—Ç:

    –ø—Ä–æ—Å–µ—á–Ω–∞ –æ—Ü–µ–Ω–∞ –Ω–∞ —Ñ–∏–ª–º–æ–≤–∏—Ç–µ –ø–æ –¥–æ–±–∏–µ–Ω–∏–æ—Ç –û—Å–∫–∞—Ä (double)
    –±—Ä–æ—ò –Ω–∞ —Ñ–∏–ª–º–æ–≤–∏ –ø–æ –¥–æ–±–∏–µ–Ω–∏–æ—Ç –û—Å–∫–∞—Ä (int)
    –≤–∫—É–ø–Ω–∞ –∑–∞—Ä–∞–±–æ—Ç–∫–∞ –æ–¥ —Ç–∏–µ —Ñ–∏–ª–º–æ–≤–∏ (double)

–ó–∞ –ø–æ—Ç—Ä–µ–±–∏—Ç–µ –Ω–∞ –∫–ª–∞—Å–∞—Ç–∞ –¥–∞ —Å–µ –¥–µ—Ñ–∏–Ω–∏—Ä–∞–∞—Ç:

    default –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä
    –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –∫–æ—ò –ø—Ä–∏–º–∞ –æ–±—ò–µ–∫—Ç –æ–¥ MovieActor –∏ –ø–ª—É—Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª–Ω–∏—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
    –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –∫–æ—ò –≥–∏ –ø—Ä–∏–º–∞ —Å–∏—Ç–µ –∞—Ä–≥—É–º–µ–Ω—Ç–∏ (–≤–∏–¥–µ—Ç–µ main)
    copy constructor, –æ–ø–µ—Ä–∞—Ç–æ—Ä =, –¥–µ—Å—Ç—Ä—É–∫—Ç–æ—Ä
    –º–µ—Ç–æ–¥ oscarRating() –∫–æ—ò –≥–æ –≤—Ä–∞—ú–∞ —Ä–µ—ò—Ç–∏–Ω–≥–æ—Ç –æ–¥ –ø–æ—Å—Ç-–û—Å–∫–∞—Ä —Ñ–∏–ª–º–æ–≤–∏—Ç–µ:

    (–ø–æ—Å—Ç-–æ—Å–∫–∞—Ä–ø—Ä–æ—Å–µ—á–Ω–∞–æ—Ü–µ–Ω–∫–∞ * 0.6) + (–ø–æ—Å—Ç-–æ—Å–∫–∞—Ä–±—Ä–æ—ò–Ω–∞—Ñ–∏–ª–º–æ–≤–∏ * 0.1) + (–ø–æ—Å—Ç-–æ—Å–∫–∞—Ä_–∑–∞—Ä–∞–±–æ—Ç–∫–∞ * 0.3)

–î–∞ —Å–µ –ø—Ä–µ–ø–æ–∫—Ä–∏—ò–∞—Ç –º–µ—Ç–æ–¥–∏—Ç–µ:

    rating() –∫–æ—ò –≤—Ä–∞—ú–∞ –ø—Ä–æ—Å–µ–∫ –æ–¥ –æ—Å–Ω–æ–≤–Ω–∏–æ—Ç –∏ oscar —Ä–µ—ò—Ç–∏–Ω–≥
    print() –∫–æ—ò –ø–æ–∫—Ä–∞—ò –æ—Å–Ω–æ–≤–Ω–∏—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∑–∞ –∞–∫—Ç–µ—Ä–æ—Ç –ø–µ—á–∞—Ç–∏ –∏:

    Oscar Rating: [—Ä–µ—ò—Ç–∏–Ω–≥]
    New Rating: [–ø—Ä–æ—Å–µ—á–Ω–∏–æ—Ç]
Input
2
3
Leonardo_DiCaprio USA 8.5 3 150.0
9.2 4 200.0
Tom_Hanks USA 9.0 5 200.0
9.5 6 250.0
Meryl_Streep USA 9.5 4 120.0
9.8 7 300.0

Expected
MOVIE ACTORS:
=====================================
Leonardo_DiCaprio - USA
Average rating: 8.5
Movies this year: 3
Total earnings: 150
Rating: 64
-------------------------
Tom_Hanks - USA
Average rating: 9
Movies this year: 5
Total earnings: 200
Rating: 84.6
-------------------------
Meryl_Streep - USA
Average rating: 9.5
Movies this year: 4
Total earnings: 120
Rating: 52.6
-------------------------
OSCAR WINNERS:
=====================================
Leonardo_DiCaprio - USA
Average rating: 8.5
Movies this year: 3
Total earnings: 150
Rating: 64.96
Oscar Rating: 65.92
New Rating: 64.96
-------------------------
Tom_Hanks - USA
Average rating: 9
Movies this year: 5
Total earnings: 200
Rating: 82.95
Oscar Rating: 81.3
New Rating: 82.95
-------------------------
Meryl_Streep - USA
Average rating: 9.5
Movies this year: 4
Total earnings: 120
Rating: 74.59
Oscar Rating: 96.58
New Rating: 74.59
-------------------------
Mainot od vtorata:
int main() {
    char name[100];
    char country[41];
    double avg_rating;
    int num_movies;
    double earnings;
    double post_avg_rating;
    int post_num_movies;
    double post_earnings;

    int n;
    cin >> n;

    if (n == 1) {
        // Test MovieActor basic functionality
        cout << "MOVIE ACTORS:" << endl;
        cout << "=====================================" << endl;
        int numActors;
        cin >> numActors;

        MovieActor* actors = new MovieActor[numActors];

        for (int i = 0; i < numActors; ++i) {
            cin >> name >> country >> avg_rating >> num_movies >> earnings;
            actors[i] = MovieActor(name, country, avg_rating, num_movies, earnings);
            actors[i].print();
            cout << "-------------------------" << endl;
        }

        delete[] actors;
    }
    else if (n == 2) {
        // Test MovieActor and create OscarWinner from it
        int numActors;
        cin >> numActors;

        MovieActor* actors = new MovieActor[numActors];
        OscarWinner* oscarWinners = new OscarWinner[numActors];
for (int i = 0; i < numActors; ++i) {
            cin >> name >> country >> avg_rating >> num_movies >> earnings;
            cin >> post_avg_rating >> post_num_movies >> post_earnings;

            actors[i] = MovieActor(name, country, avg_rating, num_movies, earnings);
            oscarWinners[i] = OscarWinner(actors[i], post_avg_rating, post_num_movies, post_earnings);
        }

        cout << "MOVIE ACTORS:" << endl;
        cout << "=====================================" << endl;
        for (int i = 0; i < numActors; ++i) {
            actors[i].print();
            cout << "-------------------------" << endl;
        }

        cout << "OSCAR WINNERS:" << endl;
        cout << "=====================================" << endl;
        for (int i = 0; i < numActors; ++i) {
            oscarWinners[i].print();
            cout << "-------------------------" << endl;
        }

        delete[] actors;
        delete[] oscarWinners;
    }
    else if (n == 3) {
        // Test OscarWinner with all arguments constructor
        int numWinners;
        cin >> numWinners;

        OscarWinner* oscarWinners = new OscarWinner[numWinners];

        for (int i = 0; i < numWinners; ++i) {
            cin >> name >> country >> avg_rating >> num_movies >> earnings;
            cin >> post_avg_rating >> post_num_movies >> post_earnings;

            oscarWinners[i] = OscarWinner(name, country, avg_rating, num_movies, earnings,
                                          post_avg_rating, post_num_movies, post_earnings);
        }

        cout << "OSCAR WINNERS:" << endl;
        cout << "=====================================" << endl;
        for (int i = 0; i < numWinners; ++i) {
            oscarWinners[i].print();
            cout << "-------------------------" << endl;
        }
delete[] oscarWinners;
    }
    else if (n == 4) {
        // Test copy constructor and operator= for MovieActor
        MovieActor actor1;
        cin >> name >> country >> avg_rating >> num_movies >> earnings;
        actor1 = MovieActor(name, country, avg_rating, num_movies, earnings);

        MovieActor actor2(actor1); // Using copy constructor
        MovieActor actor3;
        actor3 = actor1;           // Using operator=

        cout << "ORIGINAL:" << endl;
        actor1.print();
        cout << "-------------------------" << endl;

        cout << "COPY CONSTRUCTOR:" << endl;
        actor2.print();
        cout << "-------------------------" << endl;

        cout << "OPERATOR=:" << endl;
        actor3.print();
        cout << "-------------------------" << endl;
    }
    else if (n == 5) {
        // Test copy constructor and operator= for OscarWinner
        OscarWinner winner1;
        cin >> name >> country >> avg_rating >> num_movies >> earnings;
        cin >> post_avg_rating >> post_num_movies >> post_earnings;

        winner1 = OscarWinner(name, country, avg_rating, num_movies, earnings,
                              post_avg_rating, post_num_movies, post_earnings);

        OscarWinner winner2(winner1); // Using copy constructor
        OscarWinner winner3;
        winner3 = winner1;            // Using operator=

        cout << "ORIGINAL:" << endl;
        winner1.print();
        cout << "-------------------------" << endl;

        cout << "COPY CONSTRUCTOR:" << endl;
        winner2.print();
        cout << "-------------------------" << endl;

        cout << "OPERATOR=:" << endl;
        winner3.print();
        cout << "-------------------------" << endl;
    }

    return 0;
}
Mainot od vtorata (text file edition)
int main() {
    char name[100];
    char country[41];
    double avg_rating;
    int num_movies;
    double earnings;
    double post_avg_rating;
    int post_num_movies;
    double post_earnings;

    int n;
    cin >> n;

    if (n == 1) {
        // Test MovieActor basic functionality
        cout << "MOVIE ACTORS:" << endl;
        cout << "=====================================" << endl;
        int numActors;
        cin >> numActors;

        MovieActor* actors = new MovieActor[numActors];

        for (int i = 0; i < numActors; ++i) {
            cin >> name >> country >> avg_rating >> num_movies >> earnings;
            actors[i] = MovieActor(name, country, avg_rating, num_movies, earnings);
            actors[i].print();
            cout << "-------------------------" << endl;
        }

        delete[] actors;
    }
    else if (n == 2) {
        // Test MovieActor and create OscarWinner from it
        int numActors;
        cin >> numActors;

        MovieActor* actors = new MovieActor[numActors];
        OscarWinner* oscarWinners = new OscarWinner[numActors];

        for (int i = 0; i < numActors; ++i) {
            cin >> name >> country >> avg_rating >> num_movies >> earnings;
            cin >> post_avg_rating >> post_num_movies >> post_earnings;

            actors[i] = MovieActor(name, country, avg_rating, num_movies, earnings);
            oscarWinners[i] = OscarWinner(actors[i], post_avg_rating, post_num_movies, post_earnings);
        }

        cout << "MOVIE ACTORS:" << endl;
        cout << "=====================================" << endl;
        for (int i = 0; i < numActors; ++i) {
            actors[i].print();
            cout << "-------------------------" << endl;
        }

        cout << "OSCAR WINNERS:" << endl;
        cout << "=====================================" << endl;
        for (int i = 0; i < numActors; ++i) {
            oscarWinners[i].print();
            cout << "-------------------------" << endl;
        }

        delete[] actors;
        delete[] oscarWinners;
    }
    else if (n == 3) {
        // Test OscarWinner with all arguments constructor
        int numWinners;
        cin >> numWinners;

        OscarWinner* oscarWinners = new OscarWinner[numWinners];

        for (int i = 0; i < numWinners; ++i) {
            cin >> name >> country >> avg_rating >> num_movies >> earnings;
            cin >> post_avg_rating >> post_num_movies >> post_earnings;

            oscarWinners[i] = OscarWinner(name, country, avg_rating, num_movies, earnings,
                                          post_avg_rating, post_num_movies, post_earnings);
        }

        cout << "OSCAR WINNERS:" << endl;
        cout << "=====================================" << endl;
        for (int i = 0; i < numWinners; ++i) {
            oscarWinners[i].print();
            cout << "-------------------------" << endl;
        }

        delete[] oscarWinners;
    }
    else if (n == 4) {
        // Test copy constructor and operator= for MovieActor
        MovieActor actor1;
        cin >> name >> country >> avg_rating >> num_movies >> earnings;
        actor1 = MovieActor(name, country, avg_rating, num_movies, earnings);

        MovieActor actor2(actor1); // Using copy constructor
        MovieActor actor3;
        actor3 = actor1;           // Using operator=

        cout << "ORIGINAL:" << endl;
        actor1.print();
... (38 lines left)
Collapse
message.txt
5 KB
Piano Man ‚Äî Yesterday at 15:58
Car carosan
NikolA ‚Äî Yesterday at 16:44
Dve zadachki se samo?
ninja ‚Äî Yesterday at 16:55
Yup
tine ‚Äî Yesterday at 17:12
–ö–æ–ª–∫—É –µ –º–∏–Ω –∑–∞ –ø–æ–ª–∞–≥–∞—ö–µ –≤—Ç–æ—Ä –∫–æ–ª?
prizemen ‚Äî Yesterday at 17:36
any1??
tine ‚Äî Yesterday at 17:40
–°–µ–≥–∞ –≥–æ –≤–∏–¥–æ–≤ –æ–≤–∞
Image
s1123kdd24 ‚Äî Yesterday at 18:23
dete zlatno
www ‚Äî Yesterday at 19:13
I sabajle nekoj ako ima porano pishete gi ako mozhe üôÇ
excalibur ‚Äî Yesterday at 23:02
Go imas celo resenie?
diiaanaa ‚Äî Yesterday at 23:17
eve
#include <iostream>
#include <cstring>
using namespace std;
class Nedviznina {
protected:
    char *address;
Expand
message.txt
3 KB
·öπ·ö∫√ò·õí14 ‚Äî Yesterday at 23:39
utre ako mozete pratete za labsot vie sto ste od sabajle
-Alex- ‚Äî 00:30
So kolku poeni se polozuva oop na prv kolok?
filip11 ‚Äî 00:31
+- 35 ce kazele za sig
Ivan ‚Äî 00:43
Zelena mi bese pvra zadaca na kolkvium ama dadea mi 25/40 poeni
Imase li nekoja finta kaj zadacata zs mos zemale poeni ili
Ôªø
int main() {
    char name[100];
    char country[41];
    double avg_rating;
    int num_movies;
    double earnings;
    double post_avg_rating;
    int post_num_movies;
    double post_earnings;

    int n;
    cin >> n;

    if (n == 1) {
        // Test MovieActor basic functionality
        cout << "MOVIE ACTORS:" << endl;
        cout << "=====================================" << endl;
        int numActors;
        cin >> numActors;

        MovieActor* actors = new MovieActor[numActors];

        for (int i = 0; i < numActors; ++i) {
            cin >> name >> country >> avg_rating >> num_movies >> earnings;
            actors[i] = MovieActor(name, country, avg_rating, num_movies, earnings);
            actors[i].print();
            cout << "-------------------------" << endl;
        }

        delete[] actors;
    }
    else if (n == 2) {
        // Test MovieActor and create OscarWinner from it
        int numActors;
        cin >> numActors;

        MovieActor* actors = new MovieActor[numActors];
        OscarWinner* oscarWinners = new OscarWinner[numActors];

        for (int i = 0; i < numActors; ++i) {
            cin >> name >> country >> avg_rating >> num_movies >> earnings;
            cin >> post_avg_rating >> post_num_movies >> post_earnings;

            actors[i] = MovieActor(name, country, avg_rating, num_movies, earnings);
            oscarWinners[i] = OscarWinner(actors[i], post_avg_rating, post_num_movies, post_earnings);
        }

        cout << "MOVIE ACTORS:" << endl;
        cout << "=====================================" << endl;
        for (int i = 0; i < numActors; ++i) {
            actors[i].print();
            cout << "-------------------------" << endl;
        }

        cout << "OSCAR WINNERS:" << endl;
        cout << "=====================================" << endl;
        for (int i = 0; i < numActors; ++i) {
            oscarWinners[i].print();
            cout << "-------------------------" << endl;
        }

        delete[] actors;
        delete[] oscarWinners;
    }
    else if (n == 3) {
        // Test OscarWinner with all arguments constructor
        int numWinners;
        cin >> numWinners;

        OscarWinner* oscarWinners = new OscarWinner[numWinners];

        for (int i = 0; i < numWinners; ++i) {
            cin >> name >> country >> avg_rating >> num_movies >> earnings;
            cin >> post_avg_rating >> post_num_movies >> post_earnings;

            oscarWinners[i] = OscarWinner(name, country, avg_rating, num_movies, earnings,
                                          post_avg_rating, post_num_movies, post_earnings);
        }

        cout << "OSCAR WINNERS:" << endl;
        cout << "=====================================" << endl;
        for (int i = 0; i < numWinners; ++i) {
            oscarWinners[i].print();
            cout << "-------------------------" << endl;
        }

        delete[] oscarWinners;
    }
    else if (n == 4) {
        // Test copy constructor and operator= for MovieActor
        MovieActor actor1;
        cin >> name >> country >> avg_rating >> num_movies >> earnings;
        actor1 = MovieActor(name, country, avg_rating, num_movies, earnings);

        MovieActor actor2(actor1); // Using copy constructor
        MovieActor actor3;
        actor3 = actor1;           // Using operator=

        cout << "ORIGINAL:" << endl;
        actor1.print();
        cout << "-------------------------" << endl;

        cout << "COPY CONSTRUCTOR:" << endl;
        actor2.print();
        cout << "-------------------------" << endl;

        cout << "OPERATOR=:" << endl;
        actor3.print();
        cout << "-------------------------" << endl;
    }
    else if (n == 5) {
        // Test copy constructor and operator= for OscarWinner
        OscarWinner winner1;
        cin >> name >> country >> avg_rating >> num_movies >> earnings;
        cin >> post_avg_rating >> post_num_movies >> post_earnings;

        winner1 = OscarWinner(name, country, avg_rating, num_movies, earnings,
                              post_avg_rating, post_num_movies, post_earnings);

        OscarWinner winner2(winner1); // Using copy constructor
        OscarWinner winner3;
        winner3 = winner1;            // Using operator=

        cout << "ORIGINAL:" << endl;
        winner1.print();
        cout << "-------------------------" << endl;

        cout << "COPY CONSTRUCTOR:" << endl;
        winner2.print();
        cout << "-------------------------" << endl;

        cout << "OPERATOR=:" << endl;
        winner3.print();
        cout << "-------------------------" << endl;
    }

    return 0;
}
