Да се креира апстрактна класа Weather во кој се чува податок за температурата. Класата треба да ги содржи следните два виртуелни методи:

bool isDangeours() – кажува дали е ризично да се излегува надвор
void displayWeatherInfo() – печати информации за времето
Од оваа класа треба да се изведат класите SunnyWeather, RainyWeather и WindyWeather.

Во класата SunnyWeather дополнително се чуваат информации за:
УВ индексот (uv) – децимален број
Да се преоптоварат функции:
bool isDangeours() – враќа true доколку ув индексот е поголем од 8:
void displayWeatherInfo() – која печати информации за времето во следниот формат:
The weather is sunny, temperature: [temperature]°C, UV index: [uv]
, not recommended to go out (се печати само доколку isDangeorus() враќа true)

Во класата RainyWeather дополнително се чуваат информации за:
Количината на дожд (millimeter) – децимален број
Дали е невреме (isStortm) – булеан
Да се преоптоварат функции:
bool isDangeours() – враќа true доколку e невреме и количината е поголема од 10 милиметри
void displayWeatherInfo() – која печати информации за времето во следниот формат:
The weather is rainy, temperature: [temperature]°C, amount of rain: [millimeter]mm
, not recommended to go out (се печати само доколку isDangeorus() враќа true)

Во класата WindyWeather дополнително се чуваат информации за:
Брзина на ветер (speed) – децимален број
Дали е ураган (isHurricane) – булеан
Да се преоптоварат функции:
bool isDangeours() – враќа true доколку e ураган или брзината на ветеро е поглема од 80km/h
void displayWeatherInfo() – која печати информации за времето во следниот формат:
The weather is windy, temperature: [temperature]°C, wind speed: [speed]km/h
, not recommended to go out (се печати само доколку isDangeorus() враќа true) , there is a hurricane (се печати само ако е ураган)
Да се напише глобалната функција displayDangerousWeather() која прима низа од покажувачи Weather и број на елемент, како резултат враќа нова низа која ги содржи само 
објектите за кој isDangerous() враќа вредност true. 
(Низата која ја враќа функцијата треба да биде динамички алоцирана и ги содржи соодветните елементи)
#include <iostream>
using namespace std;

class Weather {
protected:
    float temperature;
public:
    Weather(float temp = 0) {
        this->temperature = temp;
    }
    virtual bool isDangerous() = 0;
    virtual void displayWeatherInfo() = 0;
    virtual ~Weather() {} // Важно за избегнување memory leak
};

class SunnyWeather : public Weather {
private:
    float uvIndex;
public:
    SunnyWeather(float temp = 0, float uv = 0) : Weather(temp) {
        this->uvIndex = uv;
    }
    bool isDangerous() override {
        return uvIndex > 8;
    }
    void displayWeatherInfo() override {
        cout << "The weather is sunny, temperature: " << temperature
             << "°C, UV index: " << uvIndex;
        if (isDangerous()) {
            cout << ", not recommended to go out";
        }
        cout << endl;
    }
};

class RainyWeather : public Weather {
private:
    float millimeter;
    bool isStorm;
public:
    RainyWeather(float temp = 0, float mill = 0, bool storm = false)
        : Weather(temp), millimeter(mill), isStorm(storm) {}

    bool isDangerous() override {
        return isStorm && millimeter > 10.0;
    }

    void displayWeatherInfo() override {
        cout << "The weather is rainy, temperature: " << temperature
             << "°C, amount of rain: " << millimeter << "mm";
        if (isDangerous()) {
            cout << ", not recommended to go out";
        }
        cout << endl;
    }
};

class WindyWeather : public Weather {
private:
    float speed;
    bool isHurricane;
public:
    WindyWeather(float temp = 0, float speed = 0, bool isH = false)
        : Weather(temp), speed(speed), isHurricane(isH) {}

    bool isDangerous() override {
        return isHurricane || speed > 80.0;
    }

    void displayWeatherInfo() override {
        cout << "The weather is windy, temperature: " << temperature
             << "°C, wind speed: " << speed << "km/h";
        if (isDangerous()) {
            cout << ", not recommended to go out";
            if (isHurricane) {
                cout << ", there is a hurricane";
            }
        }
        cout << endl;
    }
};
Weather** displayDangerousWeather(Weather* weathers[], int n, int& dangerousCount) {
    dangerousCount = 0;

    for (int i = 0; i < n; ++i) {
        if (weathers[i]->isDangerous()) {
            ++dangerousCount;
        }
    }

    Weather** dangerousList = new Weather*[dangerousCount];
    int index = 0;

    for (int i = 0; i < n; ++i) {
        if (weathers[i]->isDangerous()) {
            dangerousList[index++] = weathers[i];
        }
    }

    return dangerousList;
}
}
