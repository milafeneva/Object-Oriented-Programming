Да се креира класа Game за опишување на видеоигра. Класата треба да содржи:

name (низа од максимум 50 знаци),
конструктор со аргументи,
оператор == за споредба на две игри (споредба по име)
гетер getName()

Потоа да се креира апстрактна класа Gamer која содржи информации за гејмер и тоа:
username (динамички алоцирана низа од знаци)
games (низа од максимум 50 игри)
numGames (цел број)
hoursPerWeek (цел број)
Класата треба да содржи:
Конструктор со аргументи
Copy конструктор
Оператор=
Деструктор
Функција bool playsGame(const Game &game) која враќа дали гејмерот ја игра дадената игра
Дополнително класата треба да содржи два чисто виртуелни (апстрактни) методи:
const char* calculateSkillLevel() - за пресметување на нивото на вештина на гејмерот.
void printInfo() - за печатење на информациите за гејмерот
Од оваа класа да се изведат класите PCGamer и ConsoleGamer кои го специфицираат типот на гејмерот.

За секој PCGamer дополнително се чуваат следните информации:

streamHours (цел број)
Класата треба да содржи:

Конструктор со аргументи
Copy конструктор
Оператор=
Деструктор
Имплементација на чисто виртуелните методи од Gamer
Нивото на вештина (calculateSkillLevel()) за PCGamer се одредува според следниве правила:

Доколку гејмерот игра повеќе од 30 часа неделно и стримува повеќе од 20 часа, се смета за „Pro PCGamer“.
Во спротивно, се смета за „Casual PCGamer“.
Функцијата за печатење (printInfo()) на податоци треба да биде во следниов формат:
PCGamer : [име], Hours Per Week: [часови]h, Skill Level: [ниво]

За секој ConsoleGamer дополнително се чуваат следните информации:

isProPlayer (bool вредност)
Класата треба да содржи:

Конструктор со аргументи
Copy конструктор
Оператор=
Деструктор
Имплементација на чисто виртуелните методи од Gamer
Нивото на вештина (calculateSkillLevel()) за ConsoleGamer се одредува според следниве правила:

Доколку е означен како професионален играч, се смета за „Pro ConsoleGamer“.
Во спротивно, се смета за „Casual ConsoleGamer“.
Функцијата за печатење (printInfo()) на податоци треба да биде во следниов формат:


ConsoleGamer: [име], Hours Per Week: [часови]h, Skill Level: [ниво]

Да се дефинира глобална функција void printGamersThatPlayGame(Gamer *gamers[], int n, const Game &game) 
што на влез прима низа од покажувачи кон објекти од класата Gamer, нивниот број и игра, а како резултат ги печати информациите за сите играчи кои ја играат дадената игра и 
дополнително имаат hoursPerWeek поголем од просечниот на играчите кои ја играат дадената игра.
#include <iostream>
#include <string.h>
using namespace std;

class Game {
protected:
    char name[50];
public:
    Game(char *name = " " ) {
        strcpy(this->name, name);
    }
    bool operator==(const Game &g) {
        return strcmp(this->name, g.name) == 0;
    }
    char *getName() {
        return this->name;
    }
};
class Gamer {
protected:
    char *username;
    Game games[50];
    int numGames;
    int hoursPerWeek;
    void copy(const Gamer& g) {
        strcpy(this->username,g.username);
        this->hoursPerWeek = g.hoursPerWeek;
        this->numGames = g.numGames;
        for (int i = 0; i < numGames; i++) {
            this->games[i] = g.games[i];
        }
    }
public:
    Gamer(char *userN = " ",Game *games = nullptr, int num = 0, int hours = 0) {
        strcpy(this->username, userN);
        for (int i = 0; i < 50; i++) {
            this->games[i] = games[i];
        }
        this->numGames = num;
        this->hoursPerWeek = hours;
    }
    Gamer(const Gamer &g) {
        copy(g);
    }
    virtual ~Gamer() {
        delete [] username;
    }
    Gamer &operator=(const Gamer &g) {
        if (this != &g) {
            delete [] username;
            copy(g);
        }
        return *this;
    }
    bool playsGame(const Game &g) {
        for (int i = 0; i < numGames; i++) {
            if (games[i] == g) {
                return true;
            }
        }
        return false;
    }
    int getHours() {
        return hoursPerWeek;
    }
    virtual const char* calculateSkillLevel() = 0;
    virtual void printInfo() = 0;
};
class PCGamer : public Gamer{
private:
    int streamHours;
public:
    PCGamer(char *userN = " ",Game *games = nullptr, int num = 0, int hours = 0, int streamH = 0) : Gamer(userN, games, num, hours){
        this->streamHours = streamH;
    }
    PCGamer&operator=(const PCGamer& g) {
        if (this != &g) {
            Gamer::operator=(g);
            this->streamHours = g.streamHours;
        }
        return *this;
    }
    ~PCGamer() override {}
    PCGamer(const PCGamer &g) {
        this->streamHours = g.streamHours;
    }
    const char* calculateSkillLevel() override {
        if (streamHours >= 20 && hoursPerWeek >= 30) {
            cout << "Pro PCGamer" << endl;
        } else {
            cout << "Casual PCGamer " << endl;
        }
    }
    void printInfo() override {
        cout << "PCGamer: " << username
             << ", Hours Per Week: " << hoursPerWeek << "h"
             << ", Skill Level: " << calculateSkillLevel() << endl;
    }
};
class ConsoleGamer : public Gamer{
private:
    bool isProPlayer;
public:
    ConsoleGamer(char *username = " ", Game *games = nullptr, int numGames = 0, int hours = 0, bool isPro = false) : Gamer(username, games, numGames, hours) {
        this->isProPlayer = isPro;
    }
    ConsoleGamer(const ConsoleGamer &g) {
        this->isProPlayer = g.isProPlayer;
    }
    ConsoleGamer& operator=(const ConsoleGamer &g) {
        if (this != &g) {
            Gamer::operator=(g);
            this->isProPlayer = g.isProPlayer;
        }
        return *this;
    }
    ~ConsoleGamer() override {}
    const char* calculateSkillLevel() override {
        if (isProPlayer) {
            return "Pro ConsoleGamer";
        } else {
            return "Casual ConsoleGamer";
        }
    }
    void printInfo() override {
        cout << "ConsoleGamer: " << username
             << ", Hours Per Week: " << hoursPerWeek << "h"
             << ", Skill Level: " << calculateSkillLevel() << endl;
    }
};
void printGamersThatPlayGame(Gamer *gamers[], int n, const Game &game) {
    int total = 0;
    int count = 0;
    for (int i = 0; i < n; i++) {
        if (gamers[i]->playsGame(game)) {
            total += gamers[i]->getHours();
            count++;
        }
    }
    double average = (double)total / n;
    for (int i = 0; i < n; i++) {
        if (gamers[i]->playsGame(game) & gamers[i]->getHours() > average) {
            gamers[i]->printInfo();
        }
    }
}
